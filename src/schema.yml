openapi: 3.0.3
info:
  title: Inmobiliaria Bonpland API
  version: 1.0.0
  description: Esta guía está diseñada para brindarle toda la información que necesita
    para interactuar con nuestra API de manera efectiva. Nuestro objetivo es fomentar
    una experiencia positiva para todos los usuarios de la documentación, incluidos
    los desarrolladores, los tomadores de decisiones y los observadores.
paths:
  /api/v1/property/{id}/:
    get:
      operationId: api_v1_property_retrieve
      description: _Obtiene toda la información_ de un inmueble en el sistema según
        su id.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: Identificador unico de un inmueble.
        required: true
      tags:
      - Inmuebles
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: (OK) Retorna la información del inmueble solicitado.
        '404':
          description: (NOT_FOUND) No se encontraron inmuebles que cumplan con los
            filtros aplicados.
        '400':
          content:
            application/json:
              schema:
                properties:
                  code_error:
                    type: string
                    example: invalid_id
                  details:
                    type: object
                    properties:
                      pk:
                        type: string
                        example: Invalid ObjectId format.
          description: |-
            (BAD_REQUEST) La petición no es válida por alguna de las siguientes razones:
            - Id inválido.
  /api/v1/property/search/:
    get:
      operationId: api_v1_property_search_list
      description: Busca inmuebles en el sistema según los _filtros de busqueda_ permitidos.
      parameters:
      - in: query
        name: all
        schema:
          type: boolean
        description: Este filtro de búsqueda se usa para obtener todos los inmuebles
          activos en el sistema.
      - in: query
        name: availability_type
        schema:
          type: array
          items:
            type: string
        description: |-
          Este filtro de búsqueda se usa para definir la disponibilidad de un inmueble, los valores posibles son:
           - Compra.
           - Alquiler temporal.
           - Alquiler.
      - in: query
        name: bathrooms
        schema:
          type: array
          items:
            type: string
        description: |-
          Este filtro de búsqueda se usa para definir el número de baños del inmueble, los valores posibles son:
           - [1, 2, 3, 4, 5, 0_5].

           bathrooms=1  ==>  Exactamente un baño.

           bathrooms=0_5  ==>  Más de cinco baños.
      - in: query
        name: floors
        schema:
          type: array
          items:
            type: string
        description: |-
          Este filtro de búsqueda se usa para definir el número de pisos del inmueble, los valores posibles son:
           - [1, 2, 3, 4, 5, 0_5].

           floors=1  ==>  Exactamente un piso.

           floors=0_5  ==>  Más de cinco pisos.
      - in: query
        name: garages
        schema:
          type: boolean
        description: Este filtro se usa para determinar si un inmueble debe tener
          cochera o no.
      - in: query
        name: garden
        schema:
          type: boolean
        description: Este filtro se usa para determinar si un inmueble debe tener
          un jardín o no.
      - in: query
        name: page
        schema:
          type: integer
        description: Un número de página dentro del conjunto de resultados paginados.
      - in: query
        name: parking_lot
        schema:
          type: boolean
        description: Este filtro de búsqueda se usa para determinar si un local debe
          tener acceso a parqueadero o no.
      - in: query
        name: price_usd
        schema:
          type: string
        description: |-
          Este filtro se usa para determinar el precio o rango de precios en el que debe estar un inmueble:
          1. **Consulta en rango:**
            - price_usd=min_max  ==>  price_usd=0_150.50  ==>  Mayor a 150.50 dólares.
            - price_usd=min_max  ==>  price_usd=589_0  ==>  Menor a 589 dólares.
            - price_usd=min_max  ==>  price_usd=489.55_600.99  ==>  Entre 489.55 y 600.99 dólares.
          2. **Consulta exacta:**
            - price_usd=value  ==>  price_usd=1540.80
      - in: query
        name: rooms
        schema:
          type: array
          items:
            type: string
        description: |-
          Este filtro de búsqueda se usa para definir el número de habitaciones del inmueble, los valores posibles son:
           - [1, 2, 3, 4, 5, 0_5].

           rooms=1  ==>  Exactamente una habitción.

           rooms=0_5  ==>  Más de cinco habitaciones.
      - in: query
        name: type_local
        schema:
          type: array
          items:
            type: string
        description: |-
          Este filtro de búsqueda se usa para definir el tipo de local, los valores posibles son:
           - Comercial.
           - Industrial.
      - in: query
        name: type_property
        schema:
          type: array
          items:
            type: string
        description: |-
          Este filtro de búsqueda se usa para determinar el tipo de inmuble que se desea buscar, los valores possibles son:
           - Casa.
           - Local.
           - Departamento.
      tags:
      - Inmuebles
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPropertiesList'
          description: (OK) Retorna la lista de inmuebles que cumplen con los filtros
            de busqueda aplicados.
        '404':
          description: (NOT_FOUND) No se encontraron inmuebles que cumplan con los
            filtros aplicados.
        '400':
          content:
            application/json:
              schema:
                properties:
                  code_error:
                    type: string
                    example: invalid_path_params
                  details:
                    type: object
                    properties:
                      bathrooms:
                        type: object
                        properties:
                          '0':
                            type: array
                            items:
                              type: string
                            example:
                            - Invalid path params.
          description: |
            (BAD_REQUEST) La petición no es válida por alguna de las siguientes razones:
            - Parámetros de consulta inválidos.
  /api/v1/user/:
    post:
      operationId: api_v1_user_create
      description: Se crea el _registro_ del usuario en la base de datos de forma
        _parcial_, no se requiere la información completa del usuario.
      tags:
      - Usuarios
      requestBody:
        content:
          application/json:
            schema:
              required:
              - email
              - password
              - confirm_password
              properties:
                email:
                  type: string
                  maxLength: 100
                  nullable: false
                  pattern: ^([A-Za-z0-9]+[-_.])*[A-Za-z0-9]+@[A-Za-z]+(\.[A-Z|a-z]{2,4}){1,2}$
                  example: correo@example.com
                password:
                  type: string
                  minLength: 8
                  maxLength: 30
                  nullable: false
                  example: Aaa123456789
                confirm_password:
                  type: string
                  minLength: 8
                  maxLength: 30
                  nullable: false
                  example: Aaa123456789
      responses:
        '201':
          description: (CREATED) Usuario creado correctamente.
        '400':
          content:
            application/json:
              schema:
                properties:
                  code_error:
                    type: string
                    example: invalid_data
                  details:
                    type: object
                    properties:
                      email:
                        type: array
                        items:
                          type: string
                        example:
                        - Correo electrónico inválido.
                      password:
                        type: array
                        items:
                          type: string
                        example:
                        - El valor ingresado debe ser de al menos 8 caracteres.
          description: |-
            (BAD_REQUEST)  Los datos de la petición son inválidos, se retorna el/los mensajes de error por cada campo del formulario que no paso las validaciones:
            1. Campo email:
              - **Correo electrónico inválido:** el correo electrónico debe tener una estructura válida, los siguientes ejemplos se consideran correos inválidos.
                - correo@.com
                - correo@[cualquier-número-simbolo].com
                - correo.com
                - correo@
                - correo@example.[cualquier-número-simbolo]
                - @.com
              - **Este campo es requerido:** el correo electrónico del usuario debe ir en el cuerpo de la petición.
              - **Este campo no puede estar en blanco:** no se admiten valores vacíos ("") para este campo.
              - **Este correo electrónico ya está en uso:** no se admiten correos electrónicos duplicados en la base de datos.
              - **El valor ingresado supera el número máximo de caracteres permitidos:** el máximo de caracteres permitido para este campo es de 90.
            2. campo password:
              - **El valor ingresado debe ser de al menos 8 caracteres:** la contraseña debe ser de al menos 8 caracteres para ser considerada una contraseña segura.
              - **Este campo es requerido:** la contraseña del usuario debe ir en el cuerpo de la petición.
              - **Este campo no puede estar en blanco:** no se admiten valores vacíos ("") para este campo.
            3. campo _confirm_password_:
              - Debe conincidir con el valor del campo _password_.
        '500':
          description: |-
            (INTERNAL_SERVER_ERROR) Ocurrió un error al intentar intertar guardar el usuario en la base de datos, este error puede ser causado por las siguientes razones:
            1. Fallo en la conexión con la base de datos.
            2. El servidor no tiene los permisos necesarios para guardar el usuario.
  /api/v1/user/auth/:
    post:
      operationId: api_v1_user_auth_create
      description: Autenticar a los usuarios con sus credenciales _correo electrónico_
        y _contraseña_.
      tags:
      - Usuarios
      requestBody:
        content:
          application/json:
            schema:
              required:
              - email
              - password
              properties:
                email:
                  type: string
                  maxLength: 100
                  nullable: false
                  pattern: ^([A-Za-z0-9]+[-_.])*[A-Za-z0-9]+@[A-Za-z]+(\.[A-Z|a-z]{2,4}){1,2}$
                  example: correo@example.com
                password:
                  type: string
                  minLength: 8
                  maxLength: 30
                  nullable: false
                  example: Aaa1234567890
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  access:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY4MzIxNjU3NiwiaWF0IjoxNjgzMTMwMTc2LCJqdGkiOiI5NWJmOTE4ZmRiNjc0Y2ExYjVjNWRhMGE2OWZlYmE1MiIsInVzZXJfaWQiOjF9.PZPJ8kO-eO2Gyqr3COlVcw1n-55xWYNOgxpgorou5xE
                  refresh:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY4MzIxNjU3NiwiaWF0IjoxNjgzMTMwMTc2LCJqdGkiOiI5NWJmOTE4ZmRiNjc0Y2ExYjVjNWRhMGE2OWZlYmE1MiIsInVzZXJfaWQiOjF9.PZPJ8kO-eO2Gyqr3COlVcw1n-55xWYNOgxpgorou5xE
          description: (OK) La autenticación se completo con éxito, se crean los JWT
            para el usuario.
        '401':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                    example: No active account found with the given credentials
          description: (UNAUTHORIZED) Las credenciales del usuario son inválidas o
            no existe un usuario con esas credenciales.
        '400':
          content:
            application/json:
              schema:
                properties:
                  code_error:
                    type: string
                    example: invalid_data
                  details:
                    type: object
                    properties:
                      email:
                        type: array
                        items:
                          type: string
                        example:
                        - Correo electrónico inválido.
                      password:
                        type: array
                        items:
                          type: string
                        example:
                        - El valor ingresado debe ser de al menos 8 caracteres.
          description: |
            (BAD_REQUEST)  Los datos de la petición son inválidos, se retorna el/los mensajes de error por cada campo del formulario que no paso las validaciones:
            1. Campo email:
              - **Correo electrónico inválido:** el correo electrónico debe tener una estructura válida, los siguientes ejemplos se consideran correos inválidos.
                - correo@.com
                - correo@[cualquier-número-simbolo].com
                - correo.com
                - correo@
                - correo@example.[cualquier-número-simbolo]
                - @.com
              - **Este campo es requerido:** el correo electrónico del usuario debe ir en el cuerpo de la petición.
              - **Este campo no puede estar en blanco:** no se admiten valores vacíos ("") para este campo.
              - **Este correo electrónico ya está en uso:** no se admiten correos electrónicos duplicados en la base de datos.
              - **El valor ingresado supera el número máximo de caracteres permitidos:** el máximo de caracteres permitido para este campo es de 90.
            2. campo password:
              - **El valor ingresado debe ser de al menos 8 caracteres:** la contraseña debe ser de al menos 8 caracteres para ser considerada una contraseña segura.
              - **Este campo es requerido:** la contraseña del usuario debe ir en el cuerpo de la petición.
              - **Este campo no puede estar en blanco:** no se admiten valores vacíos ("") para este campo.
        '500':
          description: |-
            (INTERNAL_SERVER_ERROR) Ocurrió un error al intentar intertar guardar el usuario en la base de datos, este error puede ser causado por las siguientes razones:
            1. Fallo en la conexión con la base de datos.
            2. El servidor no tiene los permisos necesarios para guardar el usuario.
components:
  schemas:
    PaginatedPropertiesList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Properties'
    Properties:
      type: object
      properties:
        pk:
          type: string
          default: c7970c98-00c5-40fa-8587-f261c866e4a2
        short_description:
          type: string
          default: Apartamento de 2 dormitorios en el centro de la ciudad.
        type_property:
          type: string
          default: Casa
        availability_type:
          type: string
          default: Compra
        rooms:
          type: integer
          default: 3
        bathrooms:
          type: integer
          default: 2
        floors:
          type: integer
          default: 2
        location:
          type: string
          default: Mar del Plata 7655, Buenos Aires
        covered_meters:
          type: integer
          default: 200
        discovered_meters:
          type: integer
          default: 240
        price_usd:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          default: '100.55'
    Property:
      type: object
      properties:
        pk:
          type: string
          default: c7970c98-00c5-40fa-8587-f261c866e4a2
        short_description:
          type: string
          default: Apartamento de 2 dormitorios en el centro de la ciudad.
        long_description:
          type: string
          default: Apartamento de 2 dormitorios en el centro de la ciudad.
        type_property:
          type: string
          default: Casa
        availability_type:
          type: string
          default: Compra
        rooms:
          type: integer
          default: 3
        bathrooms:
          type: integer
          default: 2
        floors:
          type: integer
          default: 2
        ambient:
          type: object
          additionalProperties: {}
          default:
            count: 2
            list:
            - Ambiente 1
            - Ambiente 2
        rules:
          type: object
          additionalProperties: {}
          default:
            count: 3
            list:
            - Regla 1
            - Regla 2
            - Regla 3
        location:
          type: string
          default: Mar del Plata 7655, Buenos Aires
        garage:
          type: integer
          default: 2
        garden:
          type: boolean
          default: false
        extra_services:
          type: object
          additionalProperties: {}
          default:
            count: 2
            list:
            - Servicio 1
            - Servicio 2
        covered_meters:
          type: integer
          default: 200
        discovered_meters:
          type: integer
          default: 240
        price_usd:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          default: '100.55'
tags:
- name: Inmuebles
  description: Comprende todos los _endpoints_ que gestionan todas las funcionalidades
    relacionadas con un inmueble de la plataforma.
- name: Usuarios
  description: Comprende todos los endpoints que gestionan todas las funcionalidades
    relacionadas con un usuario de la plataforma.
